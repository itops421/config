{
    "tvauth":"https://testauth.googleappinfo.com/v1/auth",
    "tvtm":"tm1.googleappinfo.com",
    "tvmk":"https://broker.nbaonlineservice.com/v1/caches",
    "complaint_live":"http://complaint.nbaonlineservice.com/broadcast",
    "complaint_vod":"http://complaint.nbaonlineservice.com/tapplay",
    "api":[
        {
            "name":"oldapi.applife.top",
            "ip":"192.168.0.1"
        },
        {
            "name":"oldapi.appline.top",
            "ip":"192.168.0.2"
        }
    ],
    "ptj":[
        {
            "name":"oldptjapi.applife.top",
            "ip":"192.168.1.1"
        },
        {
            "name":"oldptjapi.appline.top",
            "ip":"192.168.1.2"
        }
    ],
	"msai":[
        {
            "name":"msai.applife.top",
            "ip":""
        },
        {
            "name":"msai.appline.top",
            "ip":""
        }
    ],
    "help":[
        {
            "name":"oldhelp.applife.top",
            "ip":"192.168.2.1"
        },
        {
            "name":"oldhelp.appline.top",
            "ip":"192.168.2.2"
        }
    ],
    "Comment":""
}